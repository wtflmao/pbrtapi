<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <title>Ê®°ÂûãÁÆ°ÁêÜË∞ÉËØïÈ°µÈù¢</title>
    <link rel="stylesheet" href="/css/debug-models.css">
</head>
<body>
    <div class="container">
        <div class="models-list">
            <h2>
                Ê®°ÂûãÂàóË°® 
                <button id="refreshModelsBtn" style="margin-left: 10px;">üîÑ Âà∑Êñ∞</button>
            </h2>
            <div id="modelsList"></div>
        </div>
        
        <div class="right-section">
            <div class="log-section">
                <h2>Êó•ÂøóÂè∞</h2>
                <div id="logContainer"></div>
            </div>

            <div class="upload-section">
                <h2>‰∏ä‰º†Ê®°Âûã</h2>
                <form id="uploadForm" enctype="multipart/form-data">
                    <input type="file" id="modelFile" name="model" accept=".zip,.obj,.glb,.gltf,.fbx,.3ds,.max,.ply,.pbrt">
                    <div id="infoJsonEditor" style="display: none;">
                        <h3>ÁºñËæë info.json</h3>
                        <textarea id="infoJsonContent"></textarea>
                    </div>
                    <button type="submit">‰∏ä‰º†Ê®°Âûã</button>
                </form>
            </div>
        </div>
    </div>

    <div class="delete-section">
        <h2>Âà†Èô§Ê®°Âûã</h2>
        <form id="deleteModelForm">
            <input type="text" id="deleteModelUuid" placeholder="ËæìÂÖ•Ê®°ÂûãUUID" required>
            <button type="submit">Âà†Èô§Ê®°Âûã</button>
        </form>
    </div>

    <!-- Ê∑ªÂä†‰∏ä‰º†ËøõÂ∫¶ÂºπÊ°Ü -->
    <div id="uploadProgress" class="upload-progress">
        <div class="upload-progress-content">
            <h3>Êñá‰ª∂‰∏ä‰º†‰∏≠</h3>
            <div class="progress-bar-container">
                <div id="progressBar" class="progress-bar"></div>
            </div>
            <div id="progressText">0%</div>
            <div id="uploadSpeed">0 MB/s</div>
        </div>
    </div>

    <script>
        const modelFileInput = document.getElementById('modelFile');
        const uploadForm = document.getElementById('uploadForm');
        const deleteModelForm = document.getElementById('deleteModelForm');
        const deleteModelUuid = document.getElementById('deleteModelUuid');
        const modelsList = document.getElementById('modelsList');
        const infoJsonEditor = document.getElementById('infoJsonEditor');
        const infoJsonContent = document.getElementById('infoJsonContent');
        const logContainer = document.getElementById('logContainer');
        const refreshModelsBtn = document.getElementById('refreshModelsBtn');
        const uploadProgress = document.getElementById('uploadProgress');
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');
        const uploadSpeed = document.getElementById('uploadSpeed');

        function log(message, type = 'info') {
            const logEntry = document.createElement('div');
            logEntry.textContent = `[${new Date().toLocaleString()}] ${message}`;
            logEntry.classList.add(type);
            logContainer.prepend(logEntry);
        }

        function formatSpeed(bytesPerSecond) {
            if (bytesPerSecond < 1024) {
                return `${bytesPerSecond.toFixed(1)} B/s`;
            } else if (bytesPerSecond < 1024 * 1024) {
                return `${(bytesPerSecond / 1024).toFixed(1)} KB/s`;
            } else {
                return `${(bytesPerSecond / (1024 * 1024)).toFixed(1)} MB/s`;
            }
        }

        function fetchModels() {
            fetch('/v1/model')
                .then(response => response.json())
                .then(models => {
                    modelsList.innerHTML = '';
                    models.forEach(model => {
                        const modelDiv = document.createElement('div');
                        modelDiv.innerHTML = `
                            <pre>${JSON.stringify(model, null, 2)}</pre>
                        `;
                        modelsList.appendChild(modelDiv);
                    });
                    log(`Ëé∑ÂèñÊ®°ÂûãÂàóË°®ÊàêÂäüÔºåÂÖ± ${models.length} ‰∏™Ê®°Âûã`);
                })
                .catch(error => {
                    log(`Ëé∑ÂèñÊ®°ÂûãÂàóË°®Â§±Ë¥•: ${error.message}`, 'error');
                });
        }

        function deleteModel(uuid) {
            fetch(`/v1/model/${uuid}`, { method: 'DELETE' })
                .then(response => {
                    if (!response.ok) throw new Error('Âà†Èô§Â§±Ë¥•');
                    log(`Ê®°Âûã ${uuid} Âà†Èô§ÊàêÂäü`, 'success');
                    fetchModels();
                })
                .catch(error => {
                    log(`Âà†Èô§Ê®°ÂûãÂ§±Ë¥•: ${error.message}`, 'error');
                });
        }

        deleteModelForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const uuid = deleteModelUuid.value.trim();
            
            if (!uuid) {
                log('ËØ∑ËæìÂÖ•Ê®°ÂûãUUID', 'error');
                return;
            }

            deleteModel(uuid);
            deleteModelUuid.value = ''; // Ê∏ÖÁ©∫ËæìÂÖ•Ê°Ü
        });

        modelFileInput.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (!file) return;

            const ext = file.name.split('.').pop().toLowerCase();
            
            if (['obj', 'glb', 'gltf', 'fbx', '3ds', 'max', 'ply', 'pbrt', 'zip'].includes(ext)) {
                // ÁîüÊàê‰∏Ä‰∏™ÂÖ®Â±ÄÁöÑ UUIDÔºåÂú®Êï¥‰∏™‰∏ä‰º†ËøáÁ®ã‰∏≠‰øùÊåÅ‰∏ÄËá¥
                const consistentUuid = crypto.randomUUID();
                const name = file.name.split('.')[0] === "" ? (file.name.split('.')[1] ? file.name.split('.')[1] : file.name) : file.name.split('.')[0];
                const defaultInfoJson = JSON.stringify({
                    name: name,
                    type: 'satellite',
                    en_US: {
                        name: name,
                        description: 'This is a satellite model',
                    },
                    zh_CN: {
                        name: name,
                        description: 'ËøôÊòØ‰∏Ä‰∏™Âç´ÊòüÊ®°Âûã',
                    }
                }, null, 2);
                
                // Â∞Ü UUID Â≠òÂÇ®Âú®‰∏Ä‰∏™ÂÖ®Â±ÄÂèòÈáè‰∏≠Ôºå‰ª•‰æøÂú®Êèê‰∫§Êó∂‰ΩøÁî®
                window.generatedModelUuid = consistentUuid;
                infoJsonContent.value = defaultInfoJson;
                infoJsonEditor.style.display = 'block';
            } else {
                infoJsonEditor.style.display = 'none';
                window.generatedModelUuid = null;
            }
        });

        uploadForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData();
            const modelFile = modelFileInput.files[0];
            
            if (!modelFile) {
                log('ËØ∑ÈÄâÊã©Ë¶Å‰∏ä‰º†ÁöÑÊñá‰ª∂', 'error');
                return;
            }

            formData.append('model', modelFile);
            
            if (infoJsonEditor.style.display !== 'none') {
                try {
                    const infoJson = JSON.parse(infoJsonContent.value);
                    
                    // Ê£ÄÊü•Áî®Êà∑ÊòØÂê¶‰øÆÊîπ‰∫Ü UUID
                    // Â¶ÇÊûúÁî®Êà∑ËæìÂÖ•ÁöÑ UUID ‰∏éÁîüÊàêÁöÑ UUID ‰∏çÂêåÔºåÂàô‰ΩøÁî®Áî®Êà∑ËæìÂÖ•ÁöÑ UUID
                    if (window.generatedModelUuid && infoJson.uuid !== window.generatedModelUuid) {
                        // Áî®Êà∑‰øÆÊîπ‰∫Ü UUIDÔºå‰ΩøÁî®Áî®Êà∑ËæìÂÖ•ÁöÑ UUID
                        log('‰ΩøÁî®Áî®Êà∑Ëá™ÂÆö‰πâÁöÑ UUID', 'info');
                    } else {
                        // ‰ΩøÁî®ÁîüÊàêÁöÑ UUID
                        infoJson.uuid = window.generatedModelUuid;
                    }
                    
                    // Âè™ÊúâÈùûzipÊñá‰ª∂ÊâçËÆæÁΩÆmodel_path
                    const ext = modelFile.name.split('.').pop().toLowerCase();
                    if (ext !== 'zip') {
                        infoJson.model_path = modelFile.name;
                    }
                    formData.append('info', JSON.stringify(infoJson));
                } catch (error) {
                    log(`info.json Ëß£ÊûêÈîôËØØ: ${error.message}`, 'error');
                    return;
                }
            }

            // ÊòæÁ§∫ËøõÂ∫¶Êù°
            uploadProgress.style.display = 'flex';
            progressBar.style.width = '0%';
            progressText.textContent = '0%';
            uploadSpeed.textContent = '0 MB/s';

            const xhr = new XMLHttpRequest();
            let startTime = Date.now();
            let lastLoaded = 0;

            xhr.upload.addEventListener('progress', function(e) {
                if (e.lengthComputable) {
                    const currentTime = Date.now();
                    const timeElapsed = (currentTime - startTime) / 1000; // ËΩ¨Êç¢‰∏∫Áßí
                    const bytesPerSecond = (e.loaded - lastLoaded) / timeElapsed;
                    
                    const percent = (e.loaded / e.total * 100).toFixed(1);
                    progressBar.style.width = percent + '%';
                    progressText.textContent = percent + '%';
                    uploadSpeed.textContent = formatSpeed(bytesPerSecond);

                    // Êõ¥Êñ∞‰∏äÊ¨°Âä†ËΩΩÁöÑÂ≠óËäÇÊï∞ÂíåÂºÄÂßãÊó∂Èó¥
                    lastLoaded = e.loaded;
                    startTime = currentTime;
                }
            });

            xhr.addEventListener('load', function() {
                // ËÆ∞ÂΩï‰∏ä‰º†ÂÆåÊàêÁöÑÊó∂Èó¥
                const uploadCompleteTime = Date.now();

                // ËÆ°ÁÆóË∑ùÁ¶ª‰∏ä‰º†ÂºÄÂßãÁöÑÊó∂Èó¥
                const hideProgressBar = () => {
                    uploadProgress.style.display = 'none';
                    if (xhr.status === 200) {
                        const result = JSON.parse(xhr.responseText);
                        const infoJsonObj = JSON.parse(infoJsonContent.value);
                        infoJsonObj.uuid = result.uuid;
                        infoJsonContent.value = JSON.stringify(infoJsonObj, null, 2);
                        
                        log(`Ê®°Âûã‰∏ä‰º†ÊàêÂäü: ${result.name} (${result.uuid})`, 'success');
                        fetchModels();
                        uploadForm.reset();
                        infoJsonEditor.style.display = 'none';
                        window.generatedModelUuid = null;
                    } else {
                        try {
                            const errorData = JSON.parse(xhr.responseText);
                            log(`‰∏ä‰º†Ê®°ÂûãÂ§±Ë¥•: ${errorData.error}`, 'error');
                        } catch (e) {
                            log(`‰∏ä‰º†Ê®°ÂûãÂ§±Ë¥•: ${xhr.statusText}`, 'error');
                        }
                    }
                };

                // Á°Æ‰øùËøõÂ∫¶Êù°Ëá≥Â∞ëÂ±ïÁ§∫2Áßí
                const MIN_DISPLAY_TIME = 2000; // 2Áßí
                const timeElapsed = Date.now() - startTime;

                if (timeElapsed < MIN_DISPLAY_TIME) {
                    // Â¶ÇÊûú‰∏ä‰º†Êó∂Èó¥Â∞è‰∫é2ÁßíÔºåÂª∂ËøüÈöêËóèËøõÂ∫¶Êù°
                    setTimeout(hideProgressBar, MIN_DISPLAY_TIME - timeElapsed);
                } else {
                    // Âê¶ÂàôÁ´ãÂç≥ÈöêËóè
                    hideProgressBar();
                }
            });

            xhr.addEventListener('error', function() {
                uploadProgress.style.display = 'none';
                log('‰∏ä‰º†Â§±Ë¥•ÔºöÁΩëÁªúÈîôËØØ', 'error');
                window.generatedModelUuid = null;
            });

            xhr.addEventListener('abort', function() {
                uploadProgress.style.display = 'none';
                log('‰∏ä‰º†Â∑≤ÂèñÊ∂à', 'info');
                window.generatedModelUuid = null;
            });

            xhr.open('POST', '/v1/model', true);
            xhr.send(formData);
        });

        refreshModelsBtn.addEventListener('click', () => {
            log('ÊâãÂä®Âà∑Êñ∞Ê®°ÂûãÂàóË°®', 'info');
            fetchModels();
        });

        // ÂàùÂßãÂä†ËΩΩ
        fetchModels();
    </script>
</body>
</html> 